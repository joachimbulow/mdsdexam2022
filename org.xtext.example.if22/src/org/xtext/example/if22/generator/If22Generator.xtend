/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.if22.if22.Program
import org.xtext.example.if22.if22.Scenario
import org.xtext.example.if22.if22.TypeBoolean
import org.xtext.example.if22.if22.TypeText
import org.xtext.example.if22.if22.TypeNumber
import org.xtext.example.if22.if22.VariableDeclaration
import org.xtext.example.if22.if22.Announcement
import org.xtext.example.if22.if22.End
import org.xtext.example.if22.if22.Question
import org.xtext.example.if22.if22.Type
import java.util.List
import org.xtext.example.if22.if22.Statement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class If22Generator extends AbstractGenerator {

	static String PACKAGE_PATH = 'interactive_fiction_test/';
	static String PACKAGE_PATH_NO_SLASH = PACKAGE_PATH.substring(0, PACKAGE_PATH.length() - 1);

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val program = resource.allContents.filter(Program).next

		compileGameFile(fsa, program.name, program.scenarios.get(0).name)
		compileCommonPackage(fsa);

		for (Scenario s : program.scenarios) {
			s.compileScenario(fsa, program.name)
		}

	}

	// Initial setup ------------------------------------------------------
	def static compileGameFile(IFileSystemAccess2 fsa, String storyName, String firstScenarioName) {
		var compilation = '''
			package «PACKAGE_PATH_NO_SLASH».«storyName»;
			
			import java.io.IOException;
			import «PACKAGE_PATH_NO_SLASH».common.*;
			
			public class Game{
				public Scenario start;
				
				// TODO ADD OPTIONAL EXTERNAL
				public Game(){
					this.start = new Scenario«firstScenarioName.toFirstUpper»();
				}
				
				public void play()  throws IOException {
					start.interact();
				}
			}
			
		'''
		fsa.generateFile(PACKAGE_PATH + storyName + "/Game.java", compilation);
	}

	def static compileCommonPackage(IFileSystemAccess2 fsa) {
		var compilation = '''
			package «PACKAGE_PATH_NO_SLASH».common;
			
			import java.io.BufferedReader;
			import java.io.InputStreamReader;
			import java.io.IOException;
			
			public abstract class Scenario {
				protected static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				protected String nextInteraction;
				protected String calledScenarioEnd;
				
				public abstract String interact() throws IOException ;
				
				public static void changeInput(InputStreamReader streamReader) {
					br = new BufferedReader(streamReader);
				}
			}
			
		'''
		fsa.generateFile(PACKAGE_PATH + "/common/Scenario.java", compilation);
	}

	// Actual compilation code ------------------------------------------------------
	// Scenario
	def static compileScenario(Scenario scenario, IFileSystemAccess2 fsa, String storyname) {
		var compilation = '''
			package «PACKAGE_PATH_NO_SLASH».«storyname»;
			
			import java.io.IOException;
			import «PACKAGE_PATH_NO_SLASH».common.*;
			
			class ScenarioValidation extends Scenario {
				«FOR variableDeclaration : scenario.variableDeclarations»
					«variableDeclaration.compileVariableDeclaration»
				«ENDFOR»
				
				«compileImplicitVariables(scenario.statements)»
				
				public String interact() throws IOException {
					nextInteraction = "Start";
					while(true){
						switch(nextInteraction){
							«FOR statement : scenario.statements»
								«statement.compileStatement»
							«ENDFOR»
						}
					}
				}
			}
			
		'''
		fsa.generateFile(PACKAGE_PATH + storyname + "/Scenario" + scenario.name.toFirstUpper + ".java", compilation);
	}

	// Variable declaration
	def static compileVariableDeclaration(VariableDeclaration variable) {
		var type = variable.type;
		switch type {
			TypeBoolean: "boolean " + variable.name + ";"
			TypeText: "String " + variable.name + ";"
			TypeNumber: "int " + variable.name + ";"
		}
	}

	// Implicit variables for user input
	def static compileImplicitVariables(List<Statement> statements) {
		var r = ""
		for (q : statements.filter[statement|statement instanceof Question]) {
			if ((q as Question).reffedVar == null) {
				r +=
					ExpResolverUtil.compileTypeFromExp((q as Question).QType) + " _" + q.name +
						";\n"
			}
		}
		return r;
	}

	// --- Compiling statements using dispatch ---
	// Announcement	TODO: COMPILE WITH SUBSTITUTING AMPERSAND
	def static dispatch String compileStatement(Announcement announcement) {
		'''
			case "«announcement.name»":
				System.out.println("«ExpResolverUtil.compileExp(announcement.exp)»");
				nextInteraction = "«announcement.targets.get(0).name»";
				break;
		'''
	}

	// Question
	def static dispatch String compileStatement(Question question) {
		'''
			case "«question.name»":
				System.out.println("«ExpResolverUtil.compileExp(question.QString)»");
				try {
					«question.reffedVar === null ? "_" + question.name : question.reffedVar.name» = «ExpResolverUtil.getTypeFromExp(question.QType).readInputString»
					nextInteraction = "«question.targets.get(0).name»";
					break;
				} catch (Exception ex) {
					break;
				}
		'''
	}
	
	

	// End statement
	def static dispatch String compileStatement(End endStatement) {
		'''
			case "«endStatement.name»":
				System.out.println("«ExpResolverUtil.compileExp(endStatement.exp)»");
				return "«endStatement.name»";
		'''

	}

	// --- END Dispatch statement compilation ---
	// Reading input from the user
	def static readInputString(Type type) {
		switch type {
			TypeBoolean: "Boolean.parseBoolean(br.readLine());"
			TypeText: "br.readLine();"
			TypeNumber: "Integer.parseInt(br.readLine());"
		}
	}

}
