/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.generator

import org.xtext.example.if22.if22.This
import org.xtext.example.if22.if22.EXPBOOL
import org.xtext.example.if22.if22.EXPINT
import org.xtext.example.if22.if22.EXPSTRING
import org.xtext.example.if22.if22.ID
import org.xtext.example.if22.if22.Type
import org.xtext.example.if22.if22.TypeBoolean
import org.xtext.example.if22.if22.TypeText
import org.xtext.example.if22.if22.TypeNumber
import org.xtext.example.if22.if22.Parenthesis
import org.xtext.example.if22.if22.Expression
import org.xtext.example.if22.if22.Logic

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ExpResolverUtil {

	def static String compileExp(Expression exp) {
		var r = "";
		if (exp instanceof Logic) {
			r = exp.left.compileExp + " " + exp.operator + " " + exp.right.compileExp
		} else if (false) {
			// exp instanceof Math
			// r = exp.left.compileExp + " " + exp.operator + " " + exp.right.compileExp
			r = "Math is TODO"
		} else {
			switch exp {
				// Math: exp.left.compileExp + " " + exp.operator + " " + exp.right.compileExp
				This: r = exp.value
				EXPSTRING: r = exp.value
				EXPINT: r = exp.value.toString()
				EXPBOOL: r = exp.value == "true" ? "true" : "false"
				ID: r = exp.value
				Type: r = exp.compileType
				Parenthesis: r = "(" + exp.exp.compileExp + ")"
			}
		}

		return r;
	}

	def static compileType(Type type) {
		switch (type) {
			TypeBoolean: "boolean"
			TypeText: "String"
			TypeNumber: "int"
		}
	}

	def static Type getTypeFromExp(Expression exp) {
		if (exp instanceof Type) {
			return exp as Type
		}
		return null;
	}

}
