/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.if22.if22.Announcement;
import org.xtext.example.if22.if22.EXPBOOL;
import org.xtext.example.if22.if22.EXPINT;
import org.xtext.example.if22.if22.EXPSTRING;
import org.xtext.example.if22.if22.End;
import org.xtext.example.if22.if22.ExternalFunctionCall;
import org.xtext.example.if22.if22.Function;
import org.xtext.example.if22.if22.ID;
import org.xtext.example.if22.if22.If22Package;
import org.xtext.example.if22.if22.Logic;
import org.xtext.example.if22.if22.Parenthesis;
import org.xtext.example.if22.if22.Program;
import org.xtext.example.if22.if22.Question;
import org.xtext.example.if22.if22.Scenario;
import org.xtext.example.if22.if22.Target;
import org.xtext.example.if22.if22.TextExp;
import org.xtext.example.if22.if22.This;
import org.xtext.example.if22.if22.TypeBoolean;
import org.xtext.example.if22.if22.TypeNumber;
import org.xtext.example.if22.if22.TypeText;
import org.xtext.example.if22.if22.VariableDeclaration;
import org.xtext.example.if22.services.If22GrammarAccess;

@SuppressWarnings("all")
public class If22SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private If22GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == If22Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case If22Package.ANNOUNCEMENT:
				sequence_Announcement(context, (Announcement) semanticObject); 
				return; 
			case If22Package.EXPBOOL:
				sequence_Primary(context, (EXPBOOL) semanticObject); 
				return; 
			case If22Package.EXPINT:
				sequence_Primary(context, (EXPINT) semanticObject); 
				return; 
			case If22Package.EXPSTRING:
				sequence_Primary(context, (EXPSTRING) semanticObject); 
				return; 
			case If22Package.END:
				sequence_End(context, (End) semanticObject); 
				return; 
			case If22Package.EXTERNAL_FUNCTION_CALL:
				sequence_ExternalFunctionCall(context, (ExternalFunctionCall) semanticObject); 
				return; 
			case If22Package.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case If22Package.ID:
				sequence_Primary(context, (ID) semanticObject); 
				return; 
			case If22Package.LOGIC:
				sequence_Exp(context, (Logic) semanticObject); 
				return; 
			case If22Package.MATH:
				sequence_Exp(context, (org.xtext.example.if22.if22.Math) semanticObject); 
				return; 
			case If22Package.PARENTHESIS:
				sequence_Parenthesis(context, (Parenthesis) semanticObject); 
				return; 
			case If22Package.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case If22Package.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case If22Package.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case If22Package.TARGET:
				sequence_Target(context, (Target) semanticObject); 
				return; 
			case If22Package.TEXT_EXP:
				sequence_Exp(context, (TextExp) semanticObject); 
				return; 
			case If22Package.THIS:
				sequence_Primary(context, (This) semanticObject); 
				return; 
			case If22Package.TYPE_BOOLEAN:
				sequence_Type(context, (TypeBoolean) semanticObject); 
				return; 
			case If22Package.TYPE_NUMBER:
				sequence_Type(context, (TypeNumber) semanticObject); 
				return; 
			case If22Package.TYPE_TEXT:
				sequence_Type(context, (TypeText) semanticObject); 
				return; 
			case If22Package.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns Announcement
	 *     Announcement returns Announcement
	 *
	 * Constraint:
	 *     (name=ID exp=Exp targets+=Target+)
	 * </pre>
	 */
	protected void sequence_Announcement(ISerializationContext context, Announcement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns End
	 *     End returns End
	 *
	 * Constraint:
	 *     (name=ID exp=Exp?)
	 * </pre>
	 */
	protected void sequence_End(ISerializationContext context, End semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Logic
	 *     Exp.Logic_1_0_0_0 returns Logic
	 *     Exp.Math_1_0_1_0 returns Logic
	 *     Exp.TextExp_1_0_2_0 returns Logic
	 *
	 * Constraint:
	 *     (
	 *         left=Exp_Logic_1_0_0_0 
	 *         (
	 *             operator='==' | 
	 *             operator='!=' | 
	 *             operator='&lt;' | 
	 *             operator='&gt;' | 
	 *             operator='&lt;=' | 
	 *             operator='&gt;=' | 
	 *             operator='&&' | 
	 *             operator='||'
	 *         ) 
	 *         right=Primary
	 *     )
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, Logic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Math
	 *     Exp.Logic_1_0_0_0 returns Math
	 *     Exp.Math_1_0_1_0 returns Math
	 *     Exp.TextExp_1_0_2_0 returns Math
	 *
	 * Constraint:
	 *     (left=Exp_Math_1_0_1_0 (operator='+' | operator='-' | operator='*' | operator='/') right=Primary)
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, org.xtext.example.if22.if22.Math semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns TextExp
	 *     Exp.Logic_1_0_0_0 returns TextExp
	 *     Exp.Math_1_0_1_0 returns TextExp
	 *     Exp.TextExp_1_0_2_0 returns TextExp
	 *
	 * Constraint:
	 *     (left=Exp_TextExp_1_0_2_0 right=Primary)
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, TextExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.TEXT_EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.TEXT_EXP__LEFT));
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.TEXT_EXP__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.TEXT_EXP__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getTextExpLeftAction_1_0_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns ExternalFunctionCall
	 *     Exp.Logic_1_0_0_0 returns ExternalFunctionCall
	 *     Exp.Math_1_0_1_0 returns ExternalFunctionCall
	 *     Exp.TextExp_1_0_2_0 returns ExternalFunctionCall
	 *     Primary returns ExternalFunctionCall
	 *     ExternalFunctionCall returns ExternalFunctionCall
	 *
	 * Constraint:
	 *     (efName=ID efParameter=Exp)
	 * </pre>
	 */
	protected void sequence_ExternalFunctionCall(ISerializationContext context, ExternalFunctionCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.EXTERNAL_FUNCTION_CALL__EF_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.EXTERNAL_FUNCTION_CALL__EF_NAME));
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.EXTERNAL_FUNCTION_CALL__EF_PARAMETER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.EXTERNAL_FUNCTION_CALL__EF_PARAMETER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExternalFunctionCallAccess().getEfNameIDTerminalRuleCall_1_0(), semanticObject.getEfName());
		feeder.accept(grammarAccess.getExternalFunctionCallAccess().getEfParameterExpParserRuleCall_3_0(), semanticObject.getEfParameter());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=ID inputType=Exp returnType=Type)
	 * </pre>
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.FUNCTION__INPUT_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.FUNCTION__INPUT_TYPE));
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.FUNCTION__RETURN_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.FUNCTION__RETURN_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFunctionAccess().getInputTypeExpParserRuleCall_3_0(), semanticObject.getInputType());
		feeder.accept(grammarAccess.getFunctionAccess().getReturnTypeTypeParserRuleCall_6_0(), semanticObject.getReturnType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Parenthesis
	 *     Exp.Logic_1_0_0_0 returns Parenthesis
	 *     Exp.Math_1_0_1_0 returns Parenthesis
	 *     Exp.TextExp_1_0_2_0 returns Parenthesis
	 *     Primary returns Parenthesis
	 *     Parenthesis returns Parenthesis
	 *
	 * Constraint:
	 *     exp=Exp
	 * </pre>
	 */
	protected void sequence_Parenthesis(ISerializationContext context, Parenthesis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.PARENTHESIS__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.PARENTHESIS__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParenthesisAccess().getExpExpParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns EXPBOOL
	 *     Exp.Logic_1_0_0_0 returns EXPBOOL
	 *     Exp.Math_1_0_1_0 returns EXPBOOL
	 *     Exp.TextExp_1_0_2_0 returns EXPBOOL
	 *     Primary returns EXPBOOL
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 * </pre>
	 */
	protected void sequence_Primary(ISerializationContext context, EXPBOOL semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.EXPBOOL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.EXPBOOL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueBOOLEANTerminalRuleCall_5_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns EXPINT
	 *     Exp.Logic_1_0_0_0 returns EXPINT
	 *     Exp.Math_1_0_1_0 returns EXPINT
	 *     Exp.TextExp_1_0_2_0 returns EXPINT
	 *     Primary returns EXPINT
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_Primary(ISerializationContext context, EXPINT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.EXPINT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.EXPINT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_4_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns EXPSTRING
	 *     Exp.Logic_1_0_0_0 returns EXPSTRING
	 *     Exp.Math_1_0_1_0 returns EXPSTRING
	 *     Exp.TextExp_1_0_2_0 returns EXPSTRING
	 *     Primary returns EXPSTRING
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_Primary(ISerializationContext context, EXPSTRING semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.EXPSTRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.EXPSTRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueSTRINGTerminalRuleCall_3_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns ID
	 *     Exp.Logic_1_0_0_0 returns ID
	 *     Exp.Math_1_0_1_0 returns ID
	 *     Exp.TextExp_1_0_2_0 returns ID
	 *     Primary returns ID
	 *
	 * Constraint:
	 *     value=ID
	 * </pre>
	 */
	protected void sequence_Primary(ISerializationContext context, ID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.ID__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.ID__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueIDTerminalRuleCall_6_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns This
	 *     Exp.Logic_1_0_0_0 returns This
	 *     Exp.Math_1_0_1_0 returns This
	 *     Exp.TextExp_1_0_2_0 returns This
	 *     Primary returns This
	 *
	 * Constraint:
	 *     value='this'
	 * </pre>
	 */
	protected void sequence_Primary(ISerializationContext context, This semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.THIS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.THIS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueThisKeyword_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (name=ID externalFunctions+=Function* scenarios+=Scenario*)
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns Question
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (name=ID qString=Exp qType=Exp reffedVar=[VariableDeclaration|ID]? targets+=Target+)
	 * </pre>
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (name=ID variableDeclarations+=VariableDeclaration* statements+=Statement*)
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Target returns Target
	 *
	 * Constraint:
	 *     (name=ID targetCheck=Exp?)
	 * </pre>
	 */
	protected void sequence_Target(ISerializationContext context, Target semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns TypeBoolean
	 *     Exp.Logic_1_0_0_0 returns TypeBoolean
	 *     Exp.Math_1_0_1_0 returns TypeBoolean
	 *     Exp.TextExp_1_0_2_0 returns TypeBoolean
	 *     Primary returns TypeBoolean
	 *     Type returns TypeBoolean
	 *
	 * Constraint:
	 *     value='boolean'
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, TypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getValueBooleanKeyword_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns TypeNumber
	 *     Exp.Logic_1_0_0_0 returns TypeNumber
	 *     Exp.Math_1_0_1_0 returns TypeNumber
	 *     Exp.TextExp_1_0_2_0 returns TypeNumber
	 *     Primary returns TypeNumber
	 *     Type returns TypeNumber
	 *
	 * Constraint:
	 *     value='number'
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, TypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getValueNumberKeyword_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns TypeText
	 *     Exp.Logic_1_0_0_0 returns TypeText
	 *     Exp.Math_1_0_1_0 returns TypeText
	 *     Exp.TextExp_1_0_2_0 returns TypeText
	 *     Primary returns TypeText
	 *     Type returns TypeText
	 *
	 * Constraint:
	 *     value='text'
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, TypeText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getValueTextKeyword_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (name=ID type=Type)
	 * </pre>
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.VARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.VARIABLE_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.VARIABLE_DECLARATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.VARIABLE_DECLARATION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
