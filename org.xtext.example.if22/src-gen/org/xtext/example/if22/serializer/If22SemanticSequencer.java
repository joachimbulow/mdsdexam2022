/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.if22.if22.Announcement;
import org.xtext.example.if22.if22.End;
import org.xtext.example.if22.if22.If22Package;
import org.xtext.example.if22.if22.Program;
import org.xtext.example.if22.if22.Question;
import org.xtext.example.if22.if22.Scenario;
import org.xtext.example.if22.if22.Target;
import org.xtext.example.if22.services.If22GrammarAccess;

@SuppressWarnings("all")
public class If22SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private If22GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == If22Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case If22Package.ANNOUNCEMENT:
				sequence_Announcement(context, (Announcement) semanticObject); 
				return; 
			case If22Package.END:
				sequence_End(context, (End) semanticObject); 
				return; 
			case If22Package.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case If22Package.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case If22Package.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case If22Package.TARGET:
				sequence_Target(context, (Target) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns Announcement
	 *     Announcement returns Announcement
	 *
	 * Constraint:
	 *     (name=ID exp=Exp target+=Target+)
	 * </pre>
	 */
	protected void sequence_Announcement(ISerializationContext context, Announcement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns End
	 *     End returns End
	 *
	 * Constraint:
	 *     (name=ID exp=Exp?)
	 * </pre>
	 */
	protected void sequence_End(ISerializationContext context, End semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (name=ID scenarios+=Scenario*)
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns Question
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (name=ID qString=Exp qType=Exp target+=Target+)
	 * </pre>
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (name=ID statements+=Statement*)
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Target returns Target
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Target(ISerializationContext context, Target semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, If22Package.Literals.TARGET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, If22Package.Literals.TARGET__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTargetAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
