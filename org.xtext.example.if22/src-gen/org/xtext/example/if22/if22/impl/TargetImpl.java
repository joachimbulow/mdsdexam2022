/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.if22.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.if22.if22.EndingTarget;
import org.xtext.example.if22.if22.Expression;
import org.xtext.example.if22.if22.If22Package;
import org.xtext.example.if22.if22.ScenarioParameterInput;
import org.xtext.example.if22.if22.Target;
import org.xtext.example.if22.if22.TargetDestination;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Target</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.if22.if22.impl.TargetImpl#getDestination <em>Destination</em>}</li>
 *   <li>{@link org.xtext.example.if22.if22.impl.TargetImpl#getParameterInputs <em>Parameter Inputs</em>}</li>
 *   <li>{@link org.xtext.example.if22.if22.impl.TargetImpl#getTargetCheck <em>Target Check</em>}</li>
 *   <li>{@link org.xtext.example.if22.if22.impl.TargetImpl#getEndTargets <em>End Targets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TargetImpl extends MinimalEObjectImpl.Container implements Target
{
  /**
   * The cached value of the '{@link #getDestination() <em>Destination</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDestination()
   * @generated
   * @ordered
   */
  protected TargetDestination destination;

  /**
   * The cached value of the '{@link #getParameterInputs() <em>Parameter Inputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterInputs()
   * @generated
   * @ordered
   */
  protected EList<ScenarioParameterInput> parameterInputs;

  /**
   * The cached value of the '{@link #getTargetCheck() <em>Target Check</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargetCheck()
   * @generated
   * @ordered
   */
  protected Expression targetCheck;

  /**
   * The cached value of the '{@link #getEndTargets() <em>End Targets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndTargets()
   * @generated
   * @ordered
   */
  protected EList<EndingTarget> endTargets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TargetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return If22Package.Literals.TARGET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TargetDestination getDestination()
  {
    if (destination != null && destination.eIsProxy())
    {
      InternalEObject oldDestination = (InternalEObject)destination;
      destination = (TargetDestination)eResolveProxy(oldDestination);
      if (destination != oldDestination)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, If22Package.TARGET__DESTINATION, oldDestination, destination));
      }
    }
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TargetDestination basicGetDestination()
  {
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDestination(TargetDestination newDestination)
  {
    TargetDestination oldDestination = destination;
    destination = newDestination;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, If22Package.TARGET__DESTINATION, oldDestination, destination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ScenarioParameterInput> getParameterInputs()
  {
    if (parameterInputs == null)
    {
      parameterInputs = new EObjectContainmentEList<ScenarioParameterInput>(ScenarioParameterInput.class, this, If22Package.TARGET__PARAMETER_INPUTS);
    }
    return parameterInputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getTargetCheck()
  {
    return targetCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTargetCheck(Expression newTargetCheck, NotificationChain msgs)
  {
    Expression oldTargetCheck = targetCheck;
    targetCheck = newTargetCheck;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, If22Package.TARGET__TARGET_CHECK, oldTargetCheck, newTargetCheck);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTargetCheck(Expression newTargetCheck)
  {
    if (newTargetCheck != targetCheck)
    {
      NotificationChain msgs = null;
      if (targetCheck != null)
        msgs = ((InternalEObject)targetCheck).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - If22Package.TARGET__TARGET_CHECK, null, msgs);
      if (newTargetCheck != null)
        msgs = ((InternalEObject)newTargetCheck).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - If22Package.TARGET__TARGET_CHECK, null, msgs);
      msgs = basicSetTargetCheck(newTargetCheck, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, If22Package.TARGET__TARGET_CHECK, newTargetCheck, newTargetCheck));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EndingTarget> getEndTargets()
  {
    if (endTargets == null)
    {
      endTargets = new EObjectContainmentEList<EndingTarget>(EndingTarget.class, this, If22Package.TARGET__END_TARGETS);
    }
    return endTargets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case If22Package.TARGET__PARAMETER_INPUTS:
        return ((InternalEList<?>)getParameterInputs()).basicRemove(otherEnd, msgs);
      case If22Package.TARGET__TARGET_CHECK:
        return basicSetTargetCheck(null, msgs);
      case If22Package.TARGET__END_TARGETS:
        return ((InternalEList<?>)getEndTargets()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case If22Package.TARGET__DESTINATION:
        if (resolve) return getDestination();
        return basicGetDestination();
      case If22Package.TARGET__PARAMETER_INPUTS:
        return getParameterInputs();
      case If22Package.TARGET__TARGET_CHECK:
        return getTargetCheck();
      case If22Package.TARGET__END_TARGETS:
        return getEndTargets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case If22Package.TARGET__DESTINATION:
        setDestination((TargetDestination)newValue);
        return;
      case If22Package.TARGET__PARAMETER_INPUTS:
        getParameterInputs().clear();
        getParameterInputs().addAll((Collection<? extends ScenarioParameterInput>)newValue);
        return;
      case If22Package.TARGET__TARGET_CHECK:
        setTargetCheck((Expression)newValue);
        return;
      case If22Package.TARGET__END_TARGETS:
        getEndTargets().clear();
        getEndTargets().addAll((Collection<? extends EndingTarget>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case If22Package.TARGET__DESTINATION:
        setDestination((TargetDestination)null);
        return;
      case If22Package.TARGET__PARAMETER_INPUTS:
        getParameterInputs().clear();
        return;
      case If22Package.TARGET__TARGET_CHECK:
        setTargetCheck((Expression)null);
        return;
      case If22Package.TARGET__END_TARGETS:
        getEndTargets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case If22Package.TARGET__DESTINATION:
        return destination != null;
      case If22Package.TARGET__PARAMETER_INPUTS:
        return parameterInputs != null && !parameterInputs.isEmpty();
      case If22Package.TARGET__TARGET_CHECK:
        return targetCheck != null;
      case If22Package.TARGET__END_TARGETS:
        return endTargets != null && !endTargets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TargetImpl
