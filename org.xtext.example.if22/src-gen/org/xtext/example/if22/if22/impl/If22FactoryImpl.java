/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.if22.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.if22.if22.Announcement;
import org.xtext.example.if22.if22.EXPBOOL;
import org.xtext.example.if22.if22.EXPINT;
import org.xtext.example.if22.if22.EXPSTRING;
import org.xtext.example.if22.if22.End;
import org.xtext.example.if22.if22.EndingTarget;
import org.xtext.example.if22.if22.Expression;
import org.xtext.example.if22.if22.ExternalFunctionCall;
import org.xtext.example.if22.if22.Function;
import org.xtext.example.if22.if22.ID;
import org.xtext.example.if22.if22.If22Factory;
import org.xtext.example.if22.if22.If22Package;
import org.xtext.example.if22.if22.Logic;
import org.xtext.example.if22.if22.Parenthesis;
import org.xtext.example.if22.if22.Program;
import org.xtext.example.if22.if22.Question;
import org.xtext.example.if22.if22.Scenario;
import org.xtext.example.if22.if22.Statement;
import org.xtext.example.if22.if22.Target;
import org.xtext.example.if22.if22.TargetDestination;
import org.xtext.example.if22.if22.TextExp;
import org.xtext.example.if22.if22.This;
import org.xtext.example.if22.if22.Type;
import org.xtext.example.if22.if22.TypeBoolean;
import org.xtext.example.if22.if22.TypeNumber;
import org.xtext.example.if22.if22.TypeText;
import org.xtext.example.if22.if22.VariableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class If22FactoryImpl extends EFactoryImpl implements If22Factory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static If22Factory init()
  {
    try
    {
      If22Factory theIf22Factory = (If22Factory)EPackage.Registry.INSTANCE.getEFactory(If22Package.eNS_URI);
      if (theIf22Factory != null)
      {
        return theIf22Factory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new If22FactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public If22FactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case If22Package.PROGRAM: return createProgram();
      case If22Package.FUNCTION: return createFunction();
      case If22Package.SCENARIO: return createScenario();
      case If22Package.VARIABLE_DECLARATION: return createVariableDeclaration();
      case If22Package.STATEMENT: return createStatement();
      case If22Package.ANNOUNCEMENT: return createAnnouncement();
      case If22Package.QUESTION: return createQuestion();
      case If22Package.END: return createEnd();
      case If22Package.TARGET: return createTarget();
      case If22Package.EXPRESSION: return createExpression();
      case If22Package.TYPE: return createType();
      case If22Package.TARGET_DESTINATION: return createTargetDestination();
      case If22Package.ENDING_TARGET: return createEndingTarget();
      case If22Package.LOGIC: return createLogic();
      case If22Package.MATH: return createMath();
      case If22Package.TEXT_EXP: return createTextExp();
      case If22Package.THIS: return createThis();
      case If22Package.EXPSTRING: return createEXPSTRING();
      case If22Package.EXPINT: return createEXPINT();
      case If22Package.EXPBOOL: return createEXPBOOL();
      case If22Package.ID: return createID();
      case If22Package.EXTERNAL_FUNCTION_CALL: return createExternalFunctionCall();
      case If22Package.PARENTHESIS: return createParenthesis();
      case If22Package.TYPE_BOOLEAN: return createTypeBoolean();
      case If22Package.TYPE_TEXT: return createTypeText();
      case If22Package.TYPE_NUMBER: return createTypeNumber();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scenario createScenario()
  {
    ScenarioImpl scenario = new ScenarioImpl();
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Announcement createAnnouncement()
  {
    AnnouncementImpl announcement = new AnnouncementImpl();
    return announcement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Question createQuestion()
  {
    QuestionImpl question = new QuestionImpl();
    return question;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public End createEnd()
  {
    EndImpl end = new EndImpl();
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Target createTarget()
  {
    TargetImpl target = new TargetImpl();
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TargetDestination createTargetDestination()
  {
    TargetDestinationImpl targetDestination = new TargetDestinationImpl();
    return targetDestination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndingTarget createEndingTarget()
  {
    EndingTargetImpl endingTarget = new EndingTargetImpl();
    return endingTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Logic createLogic()
  {
    LogicImpl logic = new LogicImpl();
    return logic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.if22.if22.Math createMath()
  {
    MathImpl math = new MathImpl();
    return math;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextExp createTextExp()
  {
    TextExpImpl textExp = new TextExpImpl();
    return textExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public This createThis()
  {
    ThisImpl this_ = new ThisImpl();
    return this_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EXPSTRING createEXPSTRING()
  {
    EXPSTRINGImpl expstring = new EXPSTRINGImpl();
    return expstring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EXPINT createEXPINT()
  {
    EXPINTImpl expint = new EXPINTImpl();
    return expint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EXPBOOL createEXPBOOL()
  {
    EXPBOOLImpl expbool = new EXPBOOLImpl();
    return expbool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ID createID()
  {
    IDImpl id = new IDImpl();
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExternalFunctionCall createExternalFunctionCall()
  {
    ExternalFunctionCallImpl externalFunctionCall = new ExternalFunctionCallImpl();
    return externalFunctionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parenthesis createParenthesis()
  {
    ParenthesisImpl parenthesis = new ParenthesisImpl();
    return parenthesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeBoolean createTypeBoolean()
  {
    TypeBooleanImpl typeBoolean = new TypeBooleanImpl();
    return typeBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeText createTypeText()
  {
    TypeTextImpl typeText = new TypeTextImpl();
    return typeText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeNumber createTypeNumber()
  {
    TypeNumberImpl typeNumber = new TypeNumberImpl();
    return typeNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public If22Package getIf22Package()
  {
    return (If22Package)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static If22Package getPackage()
  {
    return If22Package.eINSTANCE;
  }

} //If22FactoryImpl
