/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class If22GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cExternalFunctionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExternalFunctionsFunctionParserRuleCall_3_0 = (RuleCall)cExternalFunctionsAssignment_3.eContents().get(0);
		private final Assignment cScenariosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScenariosScenarioParserRuleCall_4_0 = (RuleCall)cScenariosAssignment_4.eContents().get(0);
		
		//Program:
		//    {Program} 'story' name=ID (externalFunctions+=Function)* (scenarios+=Scenario)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} 'story' name=ID (externalFunctions+=Function)* (scenarios+=Scenario)*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'story'
		public Keyword getStoryKeyword_1() { return cStoryKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(externalFunctions+=Function)*
		public Assignment getExternalFunctionsAssignment_3() { return cExternalFunctionsAssignment_3; }
		
		//Function
		public RuleCall getExternalFunctionsFunctionParserRuleCall_3_0() { return cExternalFunctionsFunctionParserRuleCall_3_0; }
		
		//(scenarios+=Scenario)*
		public Assignment getScenariosAssignment_4() { return cScenariosAssignment_4; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_4_0() { return cScenariosScenarioParserRuleCall_4_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputTypeExpParserRuleCall_3_0 = (RuleCall)cInputTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnTypeTypeParserRuleCall_6_0 = (RuleCall)cReturnTypeAssignment_6.eContents().get(0);
		
		//Function:
		//    'function' name=ID '(' inputType=Exp ')' ':' returnType=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' inputType=Exp ')' ':' returnType=Type
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//inputType=Exp
		public Assignment getInputTypeAssignment_3() { return cInputTypeAssignment_3; }
		
		//Exp
		public RuleCall getInputTypeExpParserRuleCall_3_0() { return cInputTypeExpParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//returnType=Type
		public Assignment getReturnTypeAssignment_6() { return cReturnTypeAssignment_6; }
		
		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_6_0() { return cReturnTypeTypeParserRuleCall_6_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersScenarioParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersScenarioParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariableDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableDeclarationsVariableDeclarationParserRuleCall_4_0 = (RuleCall)cVariableDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Scenario:
		//    'scenario' name=ID ('(' parameters+=ScenarioParameter (',' parameters+=ScenarioParameter)* ')')? '{'
		//    (variableDeclarations+=VariableDeclaration)*
		//    (statements+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' name=ID ('(' parameters+=ScenarioParameter (',' parameters+=ScenarioParameter)* ')')? '{'
		//(variableDeclarations+=VariableDeclaration)*
		//(statements+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' parameters+=ScenarioParameter (',' parameters+=ScenarioParameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=ScenarioParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//ScenarioParameter
		public RuleCall getParametersScenarioParameterParserRuleCall_2_1_0() { return cParametersScenarioParameterParserRuleCall_2_1_0; }
		
		//(',' parameters+=ScenarioParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parameters+=ScenarioParameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }
		
		//ScenarioParameter
		public RuleCall getParametersScenarioParameterParserRuleCall_2_2_1_0() { return cParametersScenarioParameterParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(variableDeclarations+=VariableDeclaration)*
		public Assignment getVariableDeclarationsAssignment_4() { return cVariableDeclarationsAssignment_4; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationsVariableDeclarationParserRuleCall_4_0() { return cVariableDeclarationsVariableDeclarationParserRuleCall_4_0; }
		
		//(statements+=Statement)*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ScenarioParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.ScenarioParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterExpParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeExpParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ScenarioParameter:
		//    parameter=Exp ':' type=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter=Exp ':' type=Exp
		public Group getGroup() { return cGroup; }
		
		//parameter=Exp
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }
		
		//Exp
		public RuleCall getParameterExpParserRuleCall_0_0() { return cParameterExpParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Exp
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Exp
		public RuleCall getTypeExpParserRuleCall_2_0() { return cTypeExpParserRuleCall_2_0; }
	}
	public class ScenarioParameterInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.ScenarioParameterInput");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParameterExpParserRuleCall_0 = (RuleCall)cParameterAssignment.eContents().get(0);
		
		//ScenarioParameterInput:
		// parameter=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter=Exp
		public Assignment getParameterAssignment() { return cParameterAssignment; }
		
		//Exp
		public RuleCall getParameterExpParserRuleCall_0() { return cParameterExpParserRuleCall_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//    'var' name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnouncementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//    Announcement | Question | End;
		@Override public ParserRule getRule() { return rule; }
		
		//Announcement | Question | End
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Announcement
		public RuleCall getAnnouncementParserRuleCall_0() { return cAnnouncementParserRuleCall_0; }
		
		//Question
		public RuleCall getQuestionParserRuleCall_1() { return cQuestionParserRuleCall_1; }
		
		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}
	public class AnnouncementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Announcement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnounceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Assignment cTargetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetsTargetParserRuleCall_3_0 = (RuleCall)cTargetsAssignment_3.eContents().get(0);
		
		//Announcement:
		//    'announce' name=ID exp=Exp (targets+=Target)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'announce' name=ID exp=Exp (targets+=Target)+
		public Group getGroup() { return cGroup; }
		
		//'announce'
		public Keyword getAnnounceKeyword_0() { return cAnnounceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
		
		//(targets+=Target)+
		public Assignment getTargetsAssignment_3() { return cTargetsAssignment_3; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_3_0() { return cTargetsTargetParserRuleCall_3_0; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cQStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQStringExpParserRuleCall_2_0 = (RuleCall)cQStringAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQTypeExpParserRuleCall_4_0 = (RuleCall)cQTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReffedVarAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cReffedVarVariableDeclarationCrossReference_5_1_0 = (CrossReference)cReffedVarAssignment_5_1.eContents().get(0);
		private final RuleCall cReffedVarVariableDeclarationIDTerminalRuleCall_5_1_0_1 = (RuleCall)cReffedVarVariableDeclarationCrossReference_5_1_0.eContents().get(1);
		private final Assignment cTargetsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetsTargetParserRuleCall_6_0 = (RuleCall)cTargetsAssignment_6.eContents().get(0);
		
		//Question:
		//    'question' name=ID qString=Exp 'as' qType=Exp ('in' reffedVar=[VariableDeclaration])? (targets+=Target)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'question' name=ID qString=Exp 'as' qType=Exp ('in' reffedVar=[VariableDeclaration])? (targets+=Target)+
		public Group getGroup() { return cGroup; }
		
		//'question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//qString=Exp
		public Assignment getQStringAssignment_2() { return cQStringAssignment_2; }
		
		//Exp
		public RuleCall getQStringExpParserRuleCall_2_0() { return cQStringExpParserRuleCall_2_0; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//qType=Exp
		public Assignment getQTypeAssignment_4() { return cQTypeAssignment_4; }
		
		//Exp
		public RuleCall getQTypeExpParserRuleCall_4_0() { return cQTypeExpParserRuleCall_4_0; }
		
		//('in' reffedVar=[VariableDeclaration])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'in'
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }
		
		//reffedVar=[VariableDeclaration]
		public Assignment getReffedVarAssignment_5_1() { return cReffedVarAssignment_5_1; }
		
		//[VariableDeclaration]
		public CrossReference getReffedVarVariableDeclarationCrossReference_5_1_0() { return cReffedVarVariableDeclarationCrossReference_5_1_0; }
		
		//ID
		public RuleCall getReffedVarVariableDeclarationIDTerminalRuleCall_5_1_0_1() { return cReffedVarVariableDeclarationIDTerminalRuleCall_5_1_0_1; }
		
		//(targets+=Target)+
		public Assignment getTargetsAssignment_6() { return cTargetsAssignment_6; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_6_0() { return cTargetsTargetParserRuleCall_6_0; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//End:
		//    'end' name=ID exp=Exp?;
		@Override public ParserRule getRule() { return rule; }
		
		//'end' name=ID exp=Exp?
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//exp=Exp?
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestinationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDestinationTargetDestinationCrossReference_2_0 = (CrossReference)cDestinationAssignment_2.eContents().get(0);
		private final RuleCall cDestinationTargetDestinationIDTerminalRuleCall_2_0_1 = (RuleCall)cDestinationTargetDestinationCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterInputsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterInputsScenarioParameterInputParserRuleCall_3_1_0 = (RuleCall)cParameterInputsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParameterInputsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParameterInputsScenarioParameterInputParserRuleCall_3_2_1_0 = (RuleCall)cParameterInputsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetCheckAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTargetCheckExpParserRuleCall_4_1_0 = (RuleCall)cTargetCheckAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEndTargetsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEndTargetsEndingTargetParserRuleCall_5_1_0 = (RuleCall)cEndTargetsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Target:
		//    {Target} 'to' destination=[TargetDestination] ('(' parameterInputs+=ScenarioParameterInput (',' parameterInputs+=ScenarioParameterInput)* ')')? ('if' targetCheck=Exp)? ('{' (endTargets+=EndingTarget)+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Target} 'to' destination=[TargetDestination] ('(' parameterInputs+=ScenarioParameterInput (',' parameterInputs+=ScenarioParameterInput)* ')')? ('if' targetCheck=Exp)? ('{' (endTargets+=EndingTarget)+ '}')?
		public Group getGroup() { return cGroup; }
		
		//{Target}
		public Action getTargetAction_0() { return cTargetAction_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//destination=[TargetDestination]
		public Assignment getDestinationAssignment_2() { return cDestinationAssignment_2; }
		
		//[TargetDestination]
		public CrossReference getDestinationTargetDestinationCrossReference_2_0() { return cDestinationTargetDestinationCrossReference_2_0; }
		
		//ID
		public RuleCall getDestinationTargetDestinationIDTerminalRuleCall_2_0_1() { return cDestinationTargetDestinationIDTerminalRuleCall_2_0_1; }
		
		//('(' parameterInputs+=ScenarioParameterInput (',' parameterInputs+=ScenarioParameterInput)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameterInputs+=ScenarioParameterInput
		public Assignment getParameterInputsAssignment_3_1() { return cParameterInputsAssignment_3_1; }
		
		//ScenarioParameterInput
		public RuleCall getParameterInputsScenarioParameterInputParserRuleCall_3_1_0() { return cParameterInputsScenarioParameterInputParserRuleCall_3_1_0; }
		
		//(',' parameterInputs+=ScenarioParameterInput)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameterInputs+=ScenarioParameterInput
		public Assignment getParameterInputsAssignment_3_2_1() { return cParameterInputsAssignment_3_2_1; }
		
		//ScenarioParameterInput
		public RuleCall getParameterInputsScenarioParameterInputParserRuleCall_3_2_1_0() { return cParameterInputsScenarioParameterInputParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('if' targetCheck=Exp)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'if'
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }
		
		//targetCheck=Exp
		public Assignment getTargetCheckAssignment_4_1() { return cTargetCheckAssignment_4_1; }
		
		//Exp
		public RuleCall getTargetCheckExpParserRuleCall_4_1_0() { return cTargetCheckExpParserRuleCall_4_1_0; }
		
		//('{' (endTargets+=EndingTarget)+ '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//(endTargets+=EndingTarget)+
		public Assignment getEndTargetsAssignment_5_1() { return cEndTargetsAssignment_5_1; }
		
		//EndingTarget
		public RuleCall getEndTargetsEndingTargetParserRuleCall_5_1_0() { return cEndTargetsEndingTargetParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cLogicLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0_0_1_0 = (Alternatives)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_0_0_1_0_0 = (Keyword)cOperatorAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_0_0_1_0_1 = (Keyword)cOperatorAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignKeyword_1_0_0_1_0_2 = (Keyword)cOperatorAlternatives_1_0_0_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignKeyword_1_0_0_1_0_3 = (Keyword)cOperatorAlternatives_1_0_0_1_0.eContents().get(3);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_0_0_1_0_4 = (Keyword)cOperatorAlternatives_1_0_0_1_0.eContents().get(4);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_0_0_1_0_5 = (Keyword)cOperatorAlternatives_1_0_0_1_0.eContents().get(5);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_0_0_1_0_6 = (Keyword)cOperatorAlternatives_1_0_0_1_0.eContents().get(6);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_0_0_1_0_7 = (Keyword)cOperatorAlternatives_1_0_0_1_0.eContents().get(7);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMathLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0_1_1_0 = (Alternatives)cOperatorAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_0_1_1_0_0 = (Keyword)cOperatorAlternatives_1_0_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_0_1_1_0_1 = (Keyword)cOperatorAlternatives_1_0_1_1_0.eContents().get(1);
		private final Keyword cOperatorAsteriskKeyword_1_0_1_1_0_2 = (Keyword)cOperatorAlternatives_1_0_1_1_0.eContents().get(2);
		private final Keyword cOperatorSolidusKeyword_1_0_1_1_0_3 = (Keyword)cOperatorAlternatives_1_0_1_1_0.eContents().get(3);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cTextExpLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp returns Expression:
		//    Primary
		//    (({Logic.left=current} operator=('==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||') | {Math.left=current}
		//    operator=('+' | '-' | '*'
		//    | '/') | {TextExp.left=current} '&') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary
		//(({Logic.left=current} operator=('==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||') | {Math.left=current}
		//operator=('+' | '-' | '*'
		//| '/') | {TextExp.left=current} '&') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Logic.left=current} operator=('==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||') | {Math.left=current}
		//operator=('+' | '-' | '*'
		//| '/') | {TextExp.left=current} '&') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Logic.left=current} operator=('==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||') | {Math.left=current}
		//    operator=('+' | '-' | '*'
		//    | '/') | {TextExp.left=current} '&')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Logic.left=current} operator=('==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Logic.left=current}
		public Action getLogicLeftAction_1_0_0_0() { return cLogicLeftAction_1_0_0_0; }
		
		//operator=('==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||')
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//('==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||')
		public Alternatives getOperatorAlternatives_1_0_0_1_0() { return cOperatorAlternatives_1_0_0_1_0; }
		
		//'=='
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_0_0_1_0_0() { return cOperatorEqualsSignEqualsSignKeyword_1_0_0_1_0_0; }
		
		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_0_0_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_0_0_1_0_1; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_0_0_1_0_2() { return cOperatorLessThanSignKeyword_1_0_0_1_0_2; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_0_0_1_0_3() { return cOperatorGreaterThanSignKeyword_1_0_0_1_0_3; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_0_0_1_0_4() { return cOperatorLessThanSignEqualsSignKeyword_1_0_0_1_0_4; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_0_0_1_0_5() { return cOperatorGreaterThanSignEqualsSignKeyword_1_0_0_1_0_5; }
		
		//'&&'
		public Keyword getOperatorAmpersandAmpersandKeyword_1_0_0_1_0_6() { return cOperatorAmpersandAmpersandKeyword_1_0_0_1_0_6; }
		
		//'||'
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_0_0_1_0_7() { return cOperatorVerticalLineVerticalLineKeyword_1_0_0_1_0_7; }
		
		//{Math.left=current}
		//   operator=('+' | '-' | '*'
		//   | '/')
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Math.left=current}
		public Action getMathLeftAction_1_0_1_0() { return cMathLeftAction_1_0_1_0; }
		
		//operator=('+' | '-' | '*'
		//| '/')
		public Assignment getOperatorAssignment_1_0_1_1() { return cOperatorAssignment_1_0_1_1; }
		
		//('+' | '-' | '*'
		//    | '/')
		public Alternatives getOperatorAlternatives_1_0_1_1_0() { return cOperatorAlternatives_1_0_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_0_1_1_0_0() { return cOperatorPlusSignKeyword_1_0_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_0_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_0_1_1_0_1; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_0_1_1_0_2() { return cOperatorAsteriskKeyword_1_0_1_1_0_2; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_0_1_1_0_3() { return cOperatorSolidusKeyword_1_0_1_1_0_3; }
		
		//{TextExp.left=current} '&'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{TextExp.left=current}
		public Action getTextExpLeftAction_1_0_2_0() { return cTextExpLeftAction_1_0_2_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_2_1() { return cAmpersandKeyword_1_0_2_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParenthesisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cThisAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cValueThisKeyword_2_1_0 = (Keyword)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cEXPSTRINGAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEXPINTAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cEXPBOOLAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cIDAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final RuleCall cExternalFunctionCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Primary returns Expression:
		//    Parenthesis | Type | {This} value='this' | {EXPSTRING} value=STRING | {EXPINT} value=INT | {EXPBOOL} value=BOOLEAN |
		//    {ID} value=ID | ExternalFunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Parenthesis | Type | {This} value='this' | {EXPSTRING} value=STRING | {EXPINT} value=INT | {EXPBOOL} value=BOOLEAN |
		//{ID} value=ID | ExternalFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_0() { return cParenthesisParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
		
		//{This} value='this'
		public Group getGroup_2() { return cGroup_2; }
		
		//{This}
		public Action getThisAction_2_0() { return cThisAction_2_0; }
		
		//value='this'
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//'this'
		public Keyword getValueThisKeyword_2_1_0() { return cValueThisKeyword_2_1_0; }
		
		//{EXPSTRING} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{EXPSTRING}
		public Action getEXPSTRINGAction_3_0() { return cEXPSTRINGAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{EXPINT} value=INT
		public Group getGroup_4() { return cGroup_4; }
		
		//{EXPINT}
		public Action getEXPINTAction_4_0() { return cEXPINTAction_4_0; }
		
		//value=INT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_4_1_0() { return cValueINTTerminalRuleCall_4_1_0; }
		
		//{EXPBOOL} value=BOOLEAN
		public Group getGroup_5() { return cGroup_5; }
		
		//{EXPBOOL}
		public Action getEXPBOOLAction_5_0() { return cEXPBOOLAction_5_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_5_1_0() { return cValueBOOLEANTerminalRuleCall_5_1_0; }
		
		//{ID} value=ID
		public Group getGroup_6() { return cGroup_6; }
		
		//{ID}
		public Action getIDAction_6_0() { return cIDAction_6_0; }
		
		//value=ID
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_6_1_0() { return cValueIDTerminalRuleCall_6_1_0; }
		
		//ExternalFunctionCall
		public RuleCall getExternalFunctionCallParserRuleCall_7() { return cExternalFunctionCallParserRuleCall_7; }
	}
	public class ExternalFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.ExternalFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExternalFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEfNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEfNameIDTerminalRuleCall_1_0 = (RuleCall)cEfNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEfParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEfParameterExpParserRuleCall_3_0 = (RuleCall)cEfParameterAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalFunctionCall returns Expression:
		//    {ExternalFunctionCall} efName=ID '(' efParameter=Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExternalFunctionCall} efName=ID '(' efParameter=Exp ')'
		public Group getGroup() { return cGroup; }
		
		//{ExternalFunctionCall}
		public Action getExternalFunctionCallAction_0() { return cExternalFunctionCallAction_0; }
		
		//efName=ID
		public Assignment getEfNameAssignment_1() { return cEfNameAssignment_1; }
		
		//ID
		public RuleCall getEfNameIDTerminalRuleCall_1_0() { return cEfNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//efParameter=Exp
		public Assignment getEfParameterAssignment_3() { return cEfParameterAssignment_3; }
		
		//Exp
		public RuleCall getEfParameterExpParserRuleCall_3_0() { return cEfParameterExpParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parenthesis returns Expression:
		//    {Parenthesis} '(' exp=Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parenthesis} '(' exp=Exp ')'
		public Group getGroup() { return cGroup; }
		
		//{Parenthesis}
		public Action getParenthesisAction_0() { return cParenthesisAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeBooleanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cValueBooleanKeyword_0_1_0 = (Keyword)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeTextAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cValueTextKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTypeNumberAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cValueNumberKeyword_2_1_0 = (Keyword)cValueAssignment_2_1.eContents().get(0);
		
		//Type:
		//    {TypeBoolean} value='boolean' | {TypeText} value='text' | {TypeNumber} value='number';
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeBoolean} value='boolean' | {TypeText} value='text' | {TypeNumber} value='number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TypeBoolean} value='boolean'
		public Group getGroup_0() { return cGroup_0; }
		
		//{TypeBoolean}
		public Action getTypeBooleanAction_0_0() { return cTypeBooleanAction_0_0; }
		
		//value='boolean'
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//'boolean'
		public Keyword getValueBooleanKeyword_0_1_0() { return cValueBooleanKeyword_0_1_0; }
		
		//{TypeText} value='text'
		public Group getGroup_1() { return cGroup_1; }
		
		//{TypeText}
		public Action getTypeTextAction_1_0() { return cTypeTextAction_1_0; }
		
		//value='text'
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//'text'
		public Keyword getValueTextKeyword_1_1_0() { return cValueTextKeyword_1_1_0; }
		
		//{TypeNumber} value='number'
		public Group getGroup_2() { return cGroup_2; }
		
		//{TypeNumber}
		public Action getTypeNumberAction_2_0() { return cTypeNumberAction_2_0; }
		
		//value='number'
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//'number'
		public Keyword getValueNumberKeyword_2_1_0() { return cValueNumberKeyword_2_1_0; }
	}
	public class TargetDestinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.TargetDestination");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScenarioParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TargetDestination:
		//    Statement | Scenario
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement | Scenario
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_1() { return cScenarioParserRuleCall_1; }
	}
	public class EndingTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.EndingTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndingTargetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCallableEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCallableEndEndCrossReference_2_0 = (CrossReference)cCallableEndAssignment_2.eContents().get(0);
		private final RuleCall cCallableEndEndIDTerminalRuleCall_2_0_1 = (RuleCall)cCallableEndEndCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSelfdefinedEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSelfdefinedEndEndCrossReference_4_0 = (CrossReference)cSelfdefinedEndAssignment_4.eContents().get(0);
		private final RuleCall cSelfdefinedEndEndIDTerminalRuleCall_4_0_1 = (RuleCall)cSelfdefinedEndEndCrossReference_4_0.eContents().get(1);
		
		//// Scoped cross references
		//EndingTarget:
		//    {EndingTarget}'on' callableEnd=[End] 'to' selfdefinedEnd=[End]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EndingTarget}'on' callableEnd=[End] 'to' selfdefinedEnd=[End]
		public Group getGroup() { return cGroup; }
		
		//{EndingTarget}
		public Action getEndingTargetAction_0() { return cEndingTargetAction_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//callableEnd=[End]
		public Assignment getCallableEndAssignment_2() { return cCallableEndAssignment_2; }
		
		//[End]
		public CrossReference getCallableEndEndCrossReference_2_0() { return cCallableEndEndCrossReference_2_0; }
		
		//ID
		public RuleCall getCallableEndEndIDTerminalRuleCall_2_0_1() { return cCallableEndEndIDTerminalRuleCall_2_0_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//selfdefinedEnd=[End]
		public Assignment getSelfdefinedEndAssignment_4() { return cSelfdefinedEndAssignment_4; }
		
		//[End]
		public CrossReference getSelfdefinedEndEndCrossReference_4_0() { return cSelfdefinedEndEndCrossReference_4_0; }
		
		//ID
		public RuleCall getSelfdefinedEndEndIDTerminalRuleCall_4_0_1() { return cSelfdefinedEndEndIDTerminalRuleCall_4_0_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final ScenarioElements pScenario;
	private final ScenarioParameterElements pScenarioParameter;
	private final ScenarioParameterInputElements pScenarioParameterInput;
	private final VariableDeclarationElements pVariableDeclaration;
	private final StatementElements pStatement;
	private final AnnouncementElements pAnnouncement;
	private final QuestionElements pQuestion;
	private final EndElements pEnd;
	private final TargetElements pTarget;
	private final ExpElements pExp;
	private final PrimaryElements pPrimary;
	private final ExternalFunctionCallElements pExternalFunctionCall;
	private final ParenthesisElements pParenthesis;
	private final TypeElements pType;
	private final TerminalRule tBOOLEAN;
	private final TargetDestinationElements pTargetDestination;
	private final EndingTargetElements pEndingTarget;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public If22GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pScenario = new ScenarioElements();
		this.pScenarioParameter = new ScenarioParameterElements();
		this.pScenarioParameterInput = new ScenarioParameterInputElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pStatement = new StatementElements();
		this.pAnnouncement = new AnnouncementElements();
		this.pQuestion = new QuestionElements();
		this.pEnd = new EndElements();
		this.pTarget = new TargetElements();
		this.pExp = new ExpElements();
		this.pPrimary = new PrimaryElements();
		this.pExternalFunctionCall = new ExternalFunctionCallElements();
		this.pParenthesis = new ParenthesisElements();
		this.pType = new TypeElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.if22.If22.BOOLEAN");
		this.pTargetDestination = new TargetDestinationElements();
		this.pEndingTarget = new EndingTargetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.if22.If22".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    {Program} 'story' name=ID (externalFunctions+=Function)* (scenarios+=Scenario)*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//    'function' name=ID '(' inputType=Exp ')' ':' returnType=Type;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Scenario:
	//    'scenario' name=ID ('(' parameters+=ScenarioParameter (',' parameters+=ScenarioParameter)* ')')? '{'
	//    (variableDeclarations+=VariableDeclaration)*
	//    (statements+=Statement)*
	//    '}';
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//ScenarioParameter:
	//    parameter=Exp ':' type=Exp
	//;
	public ScenarioParameterElements getScenarioParameterAccess() {
		return pScenarioParameter;
	}
	
	public ParserRule getScenarioParameterRule() {
		return getScenarioParameterAccess().getRule();
	}
	
	//ScenarioParameterInput:
	// parameter=Exp
	//;
	public ScenarioParameterInputElements getScenarioParameterInputAccess() {
		return pScenarioParameterInput;
	}
	
	public ParserRule getScenarioParameterInputRule() {
		return getScenarioParameterInputAccess().getRule();
	}
	
	//VariableDeclaration:
	//    'var' name=ID ':' type=Type;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Statement:
	//    Announcement | Question | End;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Announcement:
	//    'announce' name=ID exp=Exp (targets+=Target)+;
	public AnnouncementElements getAnnouncementAccess() {
		return pAnnouncement;
	}
	
	public ParserRule getAnnouncementRule() {
		return getAnnouncementAccess().getRule();
	}
	
	//Question:
	//    'question' name=ID qString=Exp 'as' qType=Exp ('in' reffedVar=[VariableDeclaration])? (targets+=Target)+;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//End:
	//    'end' name=ID exp=Exp?;
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//Target:
	//    {Target} 'to' destination=[TargetDestination] ('(' parameterInputs+=ScenarioParameterInput (',' parameterInputs+=ScenarioParameterInput)* ')')? ('if' targetCheck=Exp)? ('{' (endTargets+=EndingTarget)+ '}')?;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//Exp returns Expression:
	//    Primary
	//    (({Logic.left=current} operator=('==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||') | {Math.left=current}
	//    operator=('+' | '-' | '*'
	//    | '/') | {TextExp.left=current} '&') right=Primary)*;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Primary returns Expression:
	//    Parenthesis | Type | {This} value='this' | {EXPSTRING} value=STRING | {EXPINT} value=INT | {EXPBOOL} value=BOOLEAN |
	//    {ID} value=ID | ExternalFunctionCall;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//ExternalFunctionCall returns Expression:
	//    {ExternalFunctionCall} efName=ID '(' efParameter=Exp ')';
	public ExternalFunctionCallElements getExternalFunctionCallAccess() {
		return pExternalFunctionCall;
	}
	
	public ParserRule getExternalFunctionCallRule() {
		return getExternalFunctionCallAccess().getRule();
	}
	
	//Parenthesis returns Expression:
	//    {Parenthesis} '(' exp=Exp ')';
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//Type:
	//    {TypeBoolean} value='boolean' | {TypeText} value='text' | {TypeNumber} value='number';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//TargetDestination:
	//    Statement | Scenario
	//;
	public TargetDestinationElements getTargetDestinationAccess() {
		return pTargetDestination;
	}
	
	public ParserRule getTargetDestinationRule() {
		return getTargetDestinationAccess().getRule();
	}
	
	//// Scoped cross references
	//EndingTarget:
	//    {EndingTarget}'on' callableEnd=[End] 'to' selfdefinedEnd=[End]
	//;
	public EndingTargetElements getEndingTargetAccess() {
		return pEndingTarget;
	}
	
	public ParserRule getEndingTargetRule() {
		return getEndingTargetAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
