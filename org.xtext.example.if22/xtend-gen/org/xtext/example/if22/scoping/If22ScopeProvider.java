/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.scoping;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.example.if22.if22.End;
import org.xtext.example.if22.if22.EndingTarget;
import org.xtext.example.if22.if22.Program;
import org.xtext.example.if22.if22.Scenario;
import org.xtext.example.if22.if22.Statement;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class If22ScopeProvider extends AbstractIf22ScopeProvider {
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _matched = false;
    if (context instanceof EndingTarget) {
      _matched=true;
      final Program currentProgram = EcoreUtil2.<Program>getContainerOfType(context, Program.class);
      final Function1<Scenario, EList<Statement>> _function = new Function1<Scenario, EList<Statement>>() {
        public EList<Statement> apply(final Scenario s) {
          return s.getStatements();
        }
      };
      Iterable<Statement> allStatements = Iterables.<Statement>concat(ListExtensions.<Scenario, EList<Statement>>map(currentProgram.getScenarios(), _function));
      ArrayList<End> allEnds = new ArrayList<End>();
      for (final Statement s : allStatements) {
        if ((s instanceof End)) {
          allEnds.add(((End)s));
        }
      }
      return Scopes.scopeFor(allEnds);
    }
    return super.getScope(context, reference);
  }
}
