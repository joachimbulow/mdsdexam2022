/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.generator;

import com.google.common.base.Objects;
import org.xtext.example.if22.if22.EXPBOOL;
import org.xtext.example.if22.if22.EXPINT;
import org.xtext.example.if22.if22.EXPSTRING;
import org.xtext.example.if22.if22.Expression;
import org.xtext.example.if22.if22.ID;
import org.xtext.example.if22.if22.Logic;
import org.xtext.example.if22.if22.Parenthesis;
import org.xtext.example.if22.if22.This;
import org.xtext.example.if22.if22.Type;
import org.xtext.example.if22.if22.TypeBoolean;
import org.xtext.example.if22.if22.TypeNumber;
import org.xtext.example.if22.if22.TypeText;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ExpResolverUtil {
  public static String compileExp(final Expression exp) {
    String r = "";
    if ((exp instanceof Logic)) {
      String _compileExp = ExpResolverUtil.compileExp(((Logic)exp).getLeft());
      String _plus = (_compileExp + " ");
      String _operator = ((Logic)exp).getOperator();
      String _plus_1 = (_plus + _operator);
      String _plus_2 = (_plus_1 + " ");
      String _compileExp_1 = ExpResolverUtil.compileExp(((Logic)exp).getRight());
      String _plus_3 = (_plus_2 + _compileExp_1);
      r = _plus_3;
    } else {
      if (false) {
        r = "Math is TODO";
      } else {
        boolean _matched = false;
        if (exp instanceof This) {
          _matched=true;
          r = ((This)exp).getValue();
        }
        if (!_matched) {
          if (exp instanceof EXPSTRING) {
            _matched=true;
            r = ((EXPSTRING)exp).getValue();
          }
        }
        if (!_matched) {
          if (exp instanceof EXPINT) {
            _matched=true;
            r = Integer.valueOf(((EXPINT)exp).getValue()).toString();
          }
        }
        if (!_matched) {
          if (exp instanceof EXPBOOL) {
            _matched=true;
            String _xifexpression = null;
            String _value = ((EXPBOOL)exp).getValue();
            boolean _equals = Objects.equal(_value, "true");
            if (_equals) {
              _xifexpression = "true";
            } else {
              _xifexpression = "false";
            }
            r = _xifexpression;
          }
        }
        if (!_matched) {
          if (exp instanceof ID) {
            _matched=true;
            r = ((ID)exp).getValue();
          }
        }
        if (!_matched) {
          if (exp instanceof Type) {
            _matched=true;
            r = ExpResolverUtil.compileType(((Type)exp));
          }
        }
        if (!_matched) {
          if (exp instanceof Parenthesis) {
            _matched=true;
            String _compileExp_2 = ExpResolverUtil.compileExp(((Parenthesis)exp).getExp());
            String _plus_4 = ("(" + _compileExp_2);
            String _plus_5 = (_plus_4 + ")");
            r = _plus_5;
          }
        }
      }
    }
    return r;
  }
  
  public static String compileType(final Type type) {
    String _switchResult = null;
    boolean _matched = false;
    if (type instanceof TypeBoolean) {
      _matched=true;
      _switchResult = "boolean";
    }
    if (!_matched) {
      if (type instanceof TypeText) {
        _matched=true;
        _switchResult = "String";
      }
    }
    if (!_matched) {
      if (type instanceof TypeNumber) {
        _matched=true;
        _switchResult = "int";
      }
    }
    return _switchResult;
  }
  
  public static Type getTypeFromExp(final Expression exp) {
    if ((exp instanceof Type)) {
      return ((Type) exp);
    }
    return null;
  }
  
  public static String compileTypeFromExp(final Expression exp) {
    if ((exp instanceof Type)) {
      return ExpResolverUtil.compileType(((Type)exp));
    }
    return null;
  }
}
