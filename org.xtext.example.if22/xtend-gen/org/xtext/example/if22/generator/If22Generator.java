/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.if22.if22.Announcement;
import org.xtext.example.if22.if22.EXPSTRING;
import org.xtext.example.if22.if22.End;
import org.xtext.example.if22.if22.Expression;
import org.xtext.example.if22.if22.Program;
import org.xtext.example.if22.if22.Question;
import org.xtext.example.if22.if22.Scenario;
import org.xtext.example.if22.if22.Statement;
import org.xtext.example.if22.if22.Type;
import org.xtext.example.if22.if22.TypeBoolean;
import org.xtext.example.if22.if22.TypeNumber;
import org.xtext.example.if22.if22.TypeText;
import org.xtext.example.if22.if22.VariableDeclaration;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class If22Generator extends AbstractGenerator {
  private static String PACKAGE_PATH = "interactive_fiction_test/";
  
  private static String PACKAGE_PATH_NO_SLASH = If22Generator.PACKAGE_PATH.substring(0, (If22Generator.PACKAGE_PATH.length() - 1));
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = Iterators.<Program>filter(resource.getAllContents(), Program.class).next();
    If22Generator.compileGameFile(fsa, program.getName(), program.getScenarios().get(0).getName());
    If22Generator.compileCommonPackage(fsa);
    EList<Scenario> _scenarios = program.getScenarios();
    for (final Scenario s : _scenarios) {
      If22Generator.compileScenario(s, fsa, program.getName());
    }
  }
  
  public static void compileGameFile(final IFileSystemAccess2 fsa, final String storyName, final String firstScenarioName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(If22Generator.PACKAGE_PATH_NO_SLASH);
    _builder.append(".");
    _builder.append(storyName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import ");
    _builder.append(If22Generator.PACKAGE_PATH_NO_SLASH);
    _builder.append(".common.*;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class Game{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Scenario start;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// TODO ADD OPTIONAL EXTERNAL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Game(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.start = new Scenario");
    String _firstUpper = StringExtensions.toFirstUpper(firstScenarioName);
    _builder.append(_firstUpper, "\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void play()  throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("start.interact();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String compilation = _builder.toString();
    fsa.generateFile(((If22Generator.PACKAGE_PATH + storyName) + "/Game.java"), compilation);
  }
  
  public static void compileCommonPackage(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(If22Generator.PACKAGE_PATH_NO_SLASH);
    _builder.append(".common;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.BufferedReader;");
    _builder.newLine();
    _builder.append("import java.io.InputStreamReader;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Scenario {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String nextInteraction;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String calledScenarioEnd;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract String interact() throws IOException ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void changeInput(InputStreamReader streamReader) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("br = new BufferedReader(streamReader);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String compilation = _builder.toString();
    fsa.generateFile((If22Generator.PACKAGE_PATH + "/common/Scenario.java"), compilation);
  }
  
  public static void compileScenario(final Scenario scenario, final IFileSystemAccess2 fsa, final String storyname) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(If22Generator.PACKAGE_PATH_NO_SLASH);
    _builder.append(".");
    _builder.append(storyname);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import ");
    _builder.append(If22Generator.PACKAGE_PATH_NO_SLASH);
    _builder.append(".common.*;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("class ScenarioValidation extends Scenario {");
    _builder.newLine();
    {
      EList<VariableDeclaration> _variableDeclarations = scenario.getVariableDeclarations();
      for(final VariableDeclaration variableDeclaration : _variableDeclarations) {
        _builder.append("\t");
        String _compileVariableDeclaration = If22Generator.compileVariableDeclaration(variableDeclaration);
        _builder.append(_compileVariableDeclaration, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String interact() throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("nextInteraction = \"Start\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(true){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch(nextInteraction){");
    _builder.newLine();
    {
      EList<Statement> _statements = scenario.getStatements();
      for(final Statement statement : _statements) {
        _builder.append("\t\t\t\t");
        String _compileStatement = If22Generator.compileStatement(statement);
        _builder.append(_compileStatement, "\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String compilation = _builder.toString();
    String _firstUpper = StringExtensions.toFirstUpper(scenario.getName());
    String _plus = (((If22Generator.PACKAGE_PATH + storyname) + "/Scenario") + _firstUpper);
    String _plus_1 = (_plus + ".java");
    fsa.generateFile(_plus_1, compilation);
  }
  
  public static String compileVariableDeclaration(final VariableDeclaration variable) {
    String _xblockexpression = null;
    {
      Type type = variable.getType();
      String _switchResult = null;
      boolean _matched = false;
      if (type instanceof TypeBoolean) {
        _matched=true;
        String _name = variable.getName();
        String _plus = ("boolean " + _name);
        _switchResult = (_plus + ";");
      }
      if (!_matched) {
        if (type instanceof TypeText) {
          _matched=true;
          String _name = variable.getName();
          String _plus = ("String " + _name);
          _switchResult = (_plus + ";");
        }
      }
      if (!_matched) {
        if (type instanceof TypeNumber) {
          _matched=true;
          String _name = variable.getName();
          String _plus = ("Int " + _name);
          _switchResult = (_plus + ";");
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  protected static String _compileStatement(final Announcement announcement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("case \"");
    String _name = announcement.getName();
    _builder.append(_name);
    _builder.append("\":");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("System.out.println(\"");
    Expression _exp = announcement.getExp();
    _builder.append(((EXPSTRING) _exp), "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("nextInteraction = ");
    String _name_1 = announcement.getTargets().get(0).getName();
    _builder.append(_name_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("break;");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected static String _compileStatement(final Question question) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("case \"");
    String _name = question.getName();
    _builder.append(_name);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("System.out.println(\"");
    Expression _qString = question.getQString();
    _builder.append(((EXPSTRING) _qString), "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("__");
    String _name_1 = question.getName();
    _builder.append(_name_1, "\t\t");
    _builder.append(" = ");
    Expression _qType = question.getQType();
    String _readInputString = If22Generator.readInputString(((Type) _qType));
    _builder.append(_readInputString, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("nextInteraction = ");
    String _name_2 = question.getTargets().get(0).getName();
    _builder.append(_name_2, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (Exception ex) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected static String _compileStatement(final End endStatement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("case \"");
    String _name = endStatement.getName();
    _builder.append(_name);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("System.out.println(\"");
    Expression _exp = endStatement.getExp();
    _builder.append(((EXPSTRING) _exp), "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return \"");
    String _name_1 = endStatement.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public static String readInputString(final Type type) {
    String _switchResult = null;
    boolean _matched = false;
    if (type instanceof TypeBoolean) {
      _matched=true;
      _switchResult = "Boolean.parseBoolean(br.readLine());";
    }
    if (!_matched) {
      if (type instanceof TypeText) {
        _matched=true;
        _switchResult = "br.readLine();";
      }
    }
    if (!_matched) {
      if (type instanceof TypeNumber) {
        _matched=true;
        _switchResult = "Integer.parseInt(br.readLine());";
      }
    }
    return _switchResult;
  }
  
  public static String compileStatement(final Statement announcement) {
    if (announcement instanceof Announcement) {
      return _compileStatement((Announcement)announcement);
    } else if (announcement instanceof End) {
      return _compileStatement((End)announcement);
    } else if (announcement instanceof Question) {
      return _compileStatement((Question)announcement);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(announcement).toString());
    }
  }
}
