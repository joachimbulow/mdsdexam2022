/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.if22.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.if22.ide.contentassist.antlr.internal.InternalIf22Parser;
import org.xtext.example.if22.services.If22GrammarAccess;

public class If22Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(If22GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, If22GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getExpAccess().getAlternatives_1_0(), "rule__Exp__Alternatives_1_0");
			builder.put(grammarAccess.getExpAccess().getOperatorAlternatives_1_0_0_1_0(), "rule__Exp__OperatorAlternatives_1_0_0_1_0");
			builder.put(grammarAccess.getExpAccess().getOperatorAlternatives_1_0_1_1_0(), "rule__Exp__OperatorAlternatives_1_0_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getTargetDestinationAccess().getAlternatives(), "rule__TargetDestination__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_2(), "rule__Scenario__Group_2__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_2_2(), "rule__Scenario__Group_2_2__0");
			builder.put(grammarAccess.getScenarioParameterAccess().getGroup(), "rule__ScenarioParameter__Group__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getAnnouncementAccess().getGroup(), "rule__Announcement__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_5(), "rule__Question__Group_5__0");
			builder.put(grammarAccess.getEndAccess().getGroup(), "rule__End__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_3(), "rule__Target__Group_3__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_3_2(), "rule__Target__Group_3_2__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_4(), "rule__Target__Group_4__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_5(), "rule__Target__Group_5__0");
			builder.put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1(), "rule__Exp__Group_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_0(), "rule__Exp__Group_1_0_0__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_1(), "rule__Exp__Group_1_0_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_2(), "rule__Exp__Group_1_0_2__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_4(), "rule__Primary__Group_4__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_5(), "rule__Primary__Group_5__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_6(), "rule__Primary__Group_6__0");
			builder.put(grammarAccess.getExternalFunctionCallAccess().getGroup(), "rule__ExternalFunctionCall__Group__0");
			builder.put(grammarAccess.getParenthesisAccess().getGroup(), "rule__Parenthesis__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getEndingTargetAccess().getGroup(), "rule__EndingTarget__Group__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_2(), "rule__Program__NameAssignment_2");
			builder.put(grammarAccess.getProgramAccess().getExternalFunctionsAssignment_3(), "rule__Program__ExternalFunctionsAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getScenariosAssignment_4(), "rule__Program__ScenariosAssignment_4");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getInputTypeAssignment_3(), "rule__Function__InputTypeAssignment_3");
			builder.put(grammarAccess.getFunctionAccess().getReturnTypeAssignment_6(), "rule__Function__ReturnTypeAssignment_6");
			builder.put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
			builder.put(grammarAccess.getScenarioAccess().getParametersAssignment_2_1(), "rule__Scenario__ParametersAssignment_2_1");
			builder.put(grammarAccess.getScenarioAccess().getParametersAssignment_2_2_1(), "rule__Scenario__ParametersAssignment_2_2_1");
			builder.put(grammarAccess.getScenarioAccess().getVariableDeclarationsAssignment_4(), "rule__Scenario__VariableDeclarationsAssignment_4");
			builder.put(grammarAccess.getScenarioAccess().getStatementsAssignment_5(), "rule__Scenario__StatementsAssignment_5");
			builder.put(grammarAccess.getScenarioParameterAccess().getParameterAssignment_0(), "rule__ScenarioParameter__ParameterAssignment_0");
			builder.put(grammarAccess.getScenarioParameterAccess().getTypeAssignment_2(), "rule__ScenarioParameter__TypeAssignment_2");
			builder.put(grammarAccess.getScenarioParameterInputAccess().getParameterAssignment(), "rule__ScenarioParameterInput__ParameterAssignment");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_3(), "rule__VariableDeclaration__TypeAssignment_3");
			builder.put(grammarAccess.getAnnouncementAccess().getNameAssignment_1(), "rule__Announcement__NameAssignment_1");
			builder.put(grammarAccess.getAnnouncementAccess().getExpAssignment_2(), "rule__Announcement__ExpAssignment_2");
			builder.put(grammarAccess.getAnnouncementAccess().getTargetsAssignment_3(), "rule__Announcement__TargetsAssignment_3");
			builder.put(grammarAccess.getQuestionAccess().getNameAssignment_1(), "rule__Question__NameAssignment_1");
			builder.put(grammarAccess.getQuestionAccess().getQStringAssignment_2(), "rule__Question__QStringAssignment_2");
			builder.put(grammarAccess.getQuestionAccess().getQTypeAssignment_4(), "rule__Question__QTypeAssignment_4");
			builder.put(grammarAccess.getQuestionAccess().getReffedVarAssignment_5_1(), "rule__Question__ReffedVarAssignment_5_1");
			builder.put(grammarAccess.getQuestionAccess().getTargetsAssignment_6(), "rule__Question__TargetsAssignment_6");
			builder.put(grammarAccess.getEndAccess().getNameAssignment_1(), "rule__End__NameAssignment_1");
			builder.put(grammarAccess.getEndAccess().getExpAssignment_2(), "rule__End__ExpAssignment_2");
			builder.put(grammarAccess.getTargetAccess().getDestinationAssignment_2(), "rule__Target__DestinationAssignment_2");
			builder.put(grammarAccess.getTargetAccess().getParameterInputsAssignment_3_1(), "rule__Target__ParameterInputsAssignment_3_1");
			builder.put(grammarAccess.getTargetAccess().getParameterInputsAssignment_3_2_1(), "rule__Target__ParameterInputsAssignment_3_2_1");
			builder.put(grammarAccess.getTargetAccess().getTargetCheckAssignment_4_1(), "rule__Target__TargetCheckAssignment_4_1");
			builder.put(grammarAccess.getTargetAccess().getEndTargetsAssignment_5_1(), "rule__Target__EndTargetsAssignment_5_1");
			builder.put(grammarAccess.getExpAccess().getOperatorAssignment_1_0_0_1(), "rule__Exp__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getExpAccess().getOperatorAssignment_1_0_1_1(), "rule__Exp__OperatorAssignment_1_0_1_1");
			builder.put(grammarAccess.getExpAccess().getRightAssignment_1_1(), "rule__Exp__RightAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_2_1(), "rule__Primary__ValueAssignment_2_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_3_1(), "rule__Primary__ValueAssignment_3_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_4_1(), "rule__Primary__ValueAssignment_4_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_5_1(), "rule__Primary__ValueAssignment_5_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_6_1(), "rule__Primary__ValueAssignment_6_1");
			builder.put(grammarAccess.getExternalFunctionCallAccess().getEfNameAssignment_1(), "rule__ExternalFunctionCall__EfNameAssignment_1");
			builder.put(grammarAccess.getExternalFunctionCallAccess().getEfParameterAssignment_3(), "rule__ExternalFunctionCall__EfParameterAssignment_3");
			builder.put(grammarAccess.getParenthesisAccess().getExpAssignment_2(), "rule__Parenthesis__ExpAssignment_2");
			builder.put(grammarAccess.getTypeAccess().getValueAssignment_0_1(), "rule__Type__ValueAssignment_0_1");
			builder.put(grammarAccess.getTypeAccess().getValueAssignment_1_1(), "rule__Type__ValueAssignment_1_1");
			builder.put(grammarAccess.getTypeAccess().getValueAssignment_2_1(), "rule__Type__ValueAssignment_2_1");
			builder.put(grammarAccess.getEndingTargetAccess().getCallableEndAssignment_2(), "rule__EndingTarget__CallableEndAssignment_2");
			builder.put(grammarAccess.getEndingTargetAccess().getSelfdefinedEndAssignment_4(), "rule__EndingTarget__SelfdefinedEndAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private If22GrammarAccess grammarAccess;

	@Override
	protected InternalIf22Parser createParser() {
		InternalIf22Parser result = new InternalIf22Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public If22GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(If22GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
